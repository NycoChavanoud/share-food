// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id             String       @id @default(cuid())
  firstname      String?
  lastname       String?
  email          String?      @unique
  hashedPassword String?
  nickName       String?
  birthday       String?
  favoritePlate  String?
  city           String?
  description    String?      @db.Text
  avatarUrl      String?
  Account        Account[]
  Session        Session[]
  Event          Event[]
  Invitation     Invitation[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id          Int          @id @default(autoincrement())
  title       String       @db.VarChar(255)
  description String       @db.Text
  date        String
  hour        String
  typeEvent   String       @db.VarChar(80)
  address     String       @db.VarChar(80)
  authorId    String
  author      User?        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  invitations Invitation[]

  @@index([authorId], name: "author")
}

enum InvitaitonStatus {
  PENDING
  ACCEPTED
  REFUSED
}

model Invitation {
  id      Int              @id @default(autoincrement())
  guest   User             @relation(fields: [guestId], references: [id], onDelete: Cascade)
  guestId String
  event   Event?           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId Int?
  status  InvitaitonStatus

}
